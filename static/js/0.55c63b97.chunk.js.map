{"version":3,"sources":["utils/formatBalance.ts","hooks/useContract.ts","components/UnlockButton.tsx","config/constants/ifo.ts","config/constants/index.ts","hooks/useWeb3.ts"],"names":["getBalanceNumber","balance","decimals","displayBalance","BigNumber","dividedBy","pow","toNumber","getFullDisplayBalance","toFixed","useContract","abi","address","contractOptions","web3","useWeb3","useState","eth","Contract","contract","setContract","useEffect","useIdoContract","ido","useERC20","erc20","useCake","getCakeAddress","useLottery","lottery","getLotteryAddress","useMasterchef","masterChef","getMasterChefAddress","useSousChef","id","config","poolsConfig","find","pool","sousId","rawAbi","poolCategory","PoolCategory","BINANCE","sousChefBnb","sousChef","contractAddress","process","UnlockButton","props","TranslateString","useI18n","useWallet","connect","reset","onPresentConnectModal","useWalletModal","onClick","ifos","56","97","isActive","name","token","subTitle","description","saleAmount","projectSiteUrl","currency","currencyAddress","tokenDecimals","maxContribution","minContribution","farmsConfig","filter","farm","isCommunity","map","tokenSymbol","RPC_URL","getRpcUrl","httpProvider","Web3","providers","HttpProvider","timeout","ethereum","refEth","useRef","setweb3","current"],"mappings":"wHAAA,yFAEaA,EAAmB,SAACC,GAAuC,IAAnBC,EAAkB,uDAAP,GACxDC,EAAiB,IAAIC,IAAUH,GAASI,UAAU,IAAID,IAAU,IAAIE,IAAIJ,IAC9E,OAAOC,EAAeI,YAGXC,EAAwB,SAACP,GAAuC,IAAnBC,EAAkB,uDAAP,GACnE,OAAOD,EAAQI,UAAU,IAAID,IAAU,IAAIE,IAAIJ,IAAWO,Y,uXCUtDC,EAAc,SAACC,EAAcC,EAAiBC,GAClD,IAAMC,EAAOC,cAD2E,EAExDC,mBAAS,IAAIF,EAAKG,IAAIC,SAASP,EAAKC,EAASC,IAFW,mBAEjFM,EAFiF,KAEvEC,EAFuE,KAQxF,OAJAC,qBAAU,WACRD,EAAY,IAAIN,EAAKG,IAAIC,SAASP,EAAKC,EAASC,MAC/C,CAACF,EAAKC,EAASC,EAAiBC,IAE5BK,GAYIG,EAAiB,SAACV,GAE7B,OAAOF,EADSa,EACWX,IAGhBY,EAAW,SAACZ,GAEvB,OAAOF,EADWe,EACWb,IAGlBc,EAAU,WACrB,OAAOF,EAASG,gBAaLC,EAAa,WAExB,OAAOlB,EADMmB,EACWC,gBAQbC,EAAgB,WAE3B,OAAOrB,EADMsB,EACWC,gBAGbC,EAAc,SAACC,GAC1B,IAAMC,EAASC,IAAYC,MAAK,SAACC,GAAD,OAAUA,EAAKC,SAAWL,KACpDM,EAASL,EAAOM,eAAiBC,IAAaC,QAAUC,EAAcC,EAE5E,OAAOpC,EADM+B,EACWL,EAAOW,gBAAgBC,O,qFChElCC,IAZM,SAACC,GACpB,IAAMC,EAAkBC,cADM,EAEHC,cAAnBC,EAFsB,EAEtBA,QAASC,EAFa,EAEbA,MACTC,EAA0BC,YAAeH,EAASC,GAAlDC,sBAER,OACE,cAAC,IAAD,yBAAQE,QAASF,GAA2BN,GAA5C,aACGC,EAAgB,IAAK,sB,+JC+BbQ,EAzCK,CAClB,CACExB,GAAI,QACJvB,QAAS,CACPgD,GAAI,6CACJC,GAAI,8CAENC,UAAU,EACVC,KAAM,WACNC,MAAO,QACPC,SAAU,oEACVC,YAAa,8DACbC,WAAY,aACZC,eAAgB,4BAChBC,SAAU,MACVC,gBAAiB,6CACjBC,cAAe,GACfC,gBAAiB,KACjBC,gBAAiB,OAEnB,CACEtC,GAAI,QACJvB,QAAS,CACPgD,GAAI,6CACJC,GAAI,8CAENC,UAAU,EACVC,KAAM,YACNC,MAAO,QACPC,SAAU,6CACVC,YAAa,6EACbC,WAAY,OACZC,eAAgB,uBAChBC,SAAU,MACVC,gBAAiB,6CACjBC,cAAe,GACfC,gBAAiB,KACjBC,gBAAiB,QCrCEC,IAAYC,QAAO,SAACC,GAAD,OAAUA,EAAKC,eAAaC,KAAI,SAACF,GAAD,OAAUA,EAAKG,gB,uFCKnFC,EAAUC,cACVC,EAAe,IAAIC,IAAKC,UAAUC,aAAaL,EAAS,CAAEM,QAAS,MAsB1DvE,IAfC,WAAO,IACbwE,EAAyClC,cAAzCkC,SACFC,EAASC,iBAAOF,GAFF,EAGIvE,mBAAS,IAAImE,IAAKI,GAAYL,IAHlC,mBAGbpE,EAHa,KAGP4E,EAHO,KAYpB,OAPArE,qBAAU,WACJkE,IAAaC,EAAOG,UACtBD,EAAQ,IAAIP,IAAKI,GAAYL,IAC7BM,EAAOG,QAAUJ,KAElB,CAACA,IAEGzE,I","file":"static/js/0.55c63b97.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\n\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\n  const displayBalance = new BigNumber(balance).dividedBy(new BigNumber(10).pow(decimals))\n  return displayBalance.toNumber()\n}\n\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18) => {\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed()\n}\n","import { useEffect, useState } from 'react'\nimport { AbiItem } from 'web3-utils'\nimport { ContractOptions } from 'web3-eth-contract'\nimport useWeb3 from 'hooks/useWeb3'\nimport { getMasterChefAddress, getCakeAddress, getLotteryAddress, getLotteryTicketAddress } from 'utils/addressHelpers'\nimport { poolsConfig } from 'config/constants'\nimport { PoolCategory } from 'config/constants/types'\nimport ifo from 'config/abi/ifo.json'\nimport ido from 'config/abi/ido.json'\nimport erc20 from 'config/abi/erc20.json'\nimport rabbitmintingfarm from 'config/abi/rabbitmintingfarm.json'\nimport pancakeRabbits from 'config/abi/pancakeRabbits.json'\nimport lottery from 'config/abi/lottery.json'\nimport lotteryTicket from 'config/abi/lotteryNft.json'\nimport masterChef from 'config/abi/masterchef.json'\nimport sousChef from 'config/abi/sousChef.json'\nimport sousChefBnb from 'config/abi/sousChefBnb.json'\n\nconst useContract = (abi: AbiItem, address: string, contractOptions?: ContractOptions) => {\n  const web3 = useWeb3()\n  const [contract, setContract] = useState(new web3.eth.Contract(abi, address, contractOptions))\n\n  useEffect(() => {\n    setContract(new web3.eth.Contract(abi, address, contractOptions))\n  }, [abi, address, contractOptions, web3])\n\n  return contract\n}\n\n/**\n * Helper hooks to get specific contracts (by ABI)\n */\n\nexport const useIfoContract = (address: string) => {\n  const ifoAbi = (ifo as unknown) as AbiItem\n  return useContract(ifoAbi, address)\n}\n\nexport const useIdoContract = (address: string) => {\n  const idoAbi = (ido as unknown) as AbiItem\n  return useContract(idoAbi, address)\n}\n\nexport const useERC20 = (address: string) => {\n  const erc20Abi = (erc20 as unknown) as AbiItem\n  return useContract(erc20Abi, address)\n}\n\nexport const useCake = () => {\n  return useERC20(getCakeAddress())\n}\n\nexport const useRabbitMintingFarm = (address: string) => {\n  const rabbitMintingFarmAbi = (rabbitmintingfarm as unknown) as AbiItem\n  return useContract(rabbitMintingFarmAbi, address)\n}\n\nexport const usePancakeRabbits = (address: string) => {\n  const pancakeRabbitsAbi = (pancakeRabbits as unknown) as AbiItem\n  return useContract(pancakeRabbitsAbi, address)\n}\n\nexport const useLottery = () => {\n  const abi = (lottery as unknown) as AbiItem\n  return useContract(abi, getLotteryAddress())\n}\n\nexport const useLotteryTicket = () => {\n  const abi = (lotteryTicket as unknown) as AbiItem\n  return useContract(abi, getLotteryTicketAddress())\n}\n\nexport const useMasterchef = () => {\n  const abi = (masterChef as unknown) as AbiItem\n  return useContract(abi, getMasterChefAddress())\n}\n\nexport const useSousChef = (id) => {\n  const config = poolsConfig.find((pool) => pool.sousId === id)\n  const rawAbi = config.poolCategory === PoolCategory.BINANCE ? sousChefBnb : sousChef\n  const abi = (rawAbi as unknown) as AbiItem\n  return useContract(abi, config.contractAddress[process.env.REACT_APP_CHAIN_ID])\n}\n\nexport default useContract\n","import React from 'react'\nimport { Button, useWalletModal } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\n\nconst UnlockButton = (props) => {\n  const TranslateString = useI18n()\n  const { connect, reset } = useWallet()\n  const { onPresentConnectModal } = useWalletModal(connect, reset)\n\n  return (\n    <Button onClick={onPresentConnectModal} {...props}>\n      {TranslateString(292, 'Unlock Wallet')}\n    </Button>\n  )\n}\n\nexport default UnlockButton\n","import { Ifo } from './types'\n\nconst ifos: Ifo[] = [\n  {\n    id: 'cswap',\n    address: {\n      56: '0x73bC83ABc262f7657E4743A4d42c531dA5EF6F81',\n      97: '0x73bC83ABc262f7657E4743A4d42c531dA5EF6F81',\n    },\n    isActive: true,\n    name: 'CashSwap',\n    token: 'CSWAP',\n    subTitle: 'CashSwap is the Utility Token for the users of CashSwap Platform.',\n    description: 'Exclusive Payment Coin For Ground Breaking NFT Marketplace.',\n    saleAmount: '3000000000',\n    projectSiteUrl: 'https://cashswap.exchange',\n    currency: 'BNB',\n    currencyAddress: '0x3a74ce98191a540aec23e2e05ce04d05102499cf',\n    tokenDecimals: 18,\n    maxContribution: '10',\n    minContribution: '0.1',\n  },\n  {\n    id: 'block',\n    address: {\n      56: '0xb1B58e54560F93871a1a96323082E34E716dF680',\n      97: '0xb1B58e54560F93871a1a96323082E34E716dF680',\n    },\n    isActive: true,\n    name: 'CashBlock',\n    token: 'BLOCK',\n    subTitle: 'CashBlock is the Bonus Token For CashSwap.',\n    description: \"World Wide ATM's where you can buy and sell Cash Block for local currency.\",\n    saleAmount: '1000',\n    projectSiteUrl: 'https://cashblock.io',\n    currency: 'BNB',\n    currencyAddress: '0x1c4e5a863884e7bf4d764890038646297d4b42f7',\n    tokenDecimals: 18,\n    maxContribution: '10',\n    minContribution: '0.1',\n  },\n]\n\nexport default ifos\n","import farmsConfig from './farms'\n\nconst communityFarms = farmsConfig.filter((farm) => farm.isCommunity).map((farm) => farm.tokenSymbol)\n\nexport { farmsConfig, communityFarms }\nexport { default as poolsConfig } from './pools'\nexport { default as ifosConfig } from './ifo'\n","import { useEffect, useState, useRef } from 'react'\nimport Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { provider as ProviderType } from 'web3-core'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport getRpcUrl from 'utils/getRpcUrl'\n\nconst RPC_URL = getRpcUrl()\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\n\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the ethereum provider change\n */\nconst useWeb3 = () => {\n  const { ethereum }: { ethereum: ProviderType } = useWallet()\n  const refEth = useRef(ethereum)\n  const [web3, setweb3] = useState(new Web3(ethereum || httpProvider))\n\n  useEffect(() => {\n    if (ethereum !== refEth.current) {\n      setweb3(new Web3(ethereum || httpProvider))\n      refEth.current = ethereum\n    }\n  }, [ethereum])\n\n  return web3\n}\n\nexport default useWeb3\n"],"sourceRoot":""}